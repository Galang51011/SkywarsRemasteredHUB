local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local replicatedStorage = game:GetService("ReplicatedStorage")

local tools = {
	sword = nil,
	axe = nil,
	bow = nil,
	block = nil
}
local function onToolAdded(tool: Tool)
	print(tool.Name)
	if tool:IsA("Tool") then
		local toolName = tool.Name:lower()
		print(toolName,tools[toolName])
		if tools[toolName] == nil then -- Ensure we don't overwrite if the tool is already assigned
			tools[toolName] = tool -- Update the tool reference
			tool.Destroying:Connect(function()
				tools[toolName] = nil -- Remove the tool reference when it's destroyed
			end)
			tool.Activated:Connect(function() 
				if toolName == "axe" then
					if _G.AuraMine == true then
						local range = 13 -- Max distance
						local toolActivatedConnection
						local fireEvent = tools.axe:FindFirstChildOfClass("RemoteEvent")
						if not fireEvent then
							warn("No RemoteEvent found in the tool!")
							return
						end

						local function findBlocksInRange()
							local blocksInRange = {}
							local characterPosition = character:GetPrimaryPartCFrame().Position

							for _, descendant in ipairs(workspace:GetDescendants()) do
								if descendant:IsA("BasePart") and descendant.Name == "Block" then
									local distance = (descendant.Position - characterPosition).Magnitude
									if distance <= range then
										table.insert(blocksInRange, descendant)
									end
								end
							end
							return blocksInRange
						end
							print("Tool activated!")
							
						repeat wait(.1) 
							if tools.axe.Parent == character then
								local blocksInRange = findBlocksInRange()
								for _, block in ipairs(blocksInRange) do
									fireEvent:FireServer(block)
									task.wait(_G.DelayMines) -- Ensures delay is applied
								end
							else
								warn("Tool is not in the player's character!")
							end
						until not _G.AuraMine
					end
					if _G.ThreeMine == true then
						local range = 6 -- Max distance
						local toolActivatedConnection

						repeat wait() until tools.axe ~= nil
						if not _G.ThreeMine then return end

						local tool = tools.axe

						local function findBlocksInRange(position)
							local blocksInRange = {}
							for _, descendant in ipairs(workspace:GetDescendants()) do
								if descendant:IsA("BasePart") and descendant.Name == "Block" then
									local distance = (descendant.Position - position).Magnitude
									if distance <= range then
										table.insert(blocksInRange, descendant)
									end
								end
							end
							return blocksInRange
						end

							local hit = LocalPlayer:GetMouse().Hit
							local allblock = findBlocksInRange(hit.Position)
							for _, block in ipairs(allblock) do
								local remoteevent = tool:FindFirstChildOfClass("RemoteEvent")
								if not remoteevent then
									warn("No RemoteEvent found in the tool!")
									return
								end
								remoteevent:FireServer(block)
								task.wait(_G.DelayMines) -- Ensures delay is applied
							end

						
					end
				end
			end)
		end
	end
end


character.ChildAdded:Connect(onToolAdded)
LocalPlayer.CharacterAdded:Connect(function(m)
	character = m
	character.ChildAdded:Connect(onToolAdded)
end)

-- Detect tools added/removed from Character

-- Check existing tools in Backpack
for _, tool in ipairs(LocalPlayer.Backpack:GetChildren()) do
	onToolAdded(tool)
end


local Window = Library.CreateLib("NotGal!Skywars HUB", "DarkTheme")

local Tab = Window:NewTab("Tools")
local Section = Tab:NewSection("Pickaxe")

_G.AuraMine = false -- Fix _G variable syntax
_G.ThreeMine = false
_G.FiveTimesMine = false
_G.DelayMines = 0

Section:NewToggle("Huge Mine", "Let you mine about 16 stud distance", function(state)
	_G.AuraMine = state
end)

Section:NewToggle("3x3 Mine", "Let you mine every 3x3 block", function(state)
	_G.ThreeMine = state
end)



Section:NewSlider("Delay Mine", "Adjust delay (ms)", 500, 0.01, function(number)
	_G.DelayMines = number / 100 -- Convert to seconds
end)

local Section = Tab:NewSection("Block")

_G.AutoBridge = false

Section:NewToggle("Auto Bridge","Let you bridge automatic",function(state)
	_G.AutoBridge = state

	if _G.AutoBridge then
		local remoteFunction:RemoteFunction = tools.block:FindFirstChildOfClass("RemoteFunction")
		local blocksize = Vector3.new(4,4,4)
		local directions = {
			Front = Vector3.new(0, 0, -blocksize.Z),
			Back = Vector3.new(0, 0, blocksize.Z),
			Left = Vector3.new(-blocksize.X, 0, 0),
			Right = Vector3.new(blocksize.X, 0, 0),
		}
		local function getFacingDirection()
			local lookVector = character:FindFirstChild("HumanoidRootPart").CFrame.LookVector
			if math.abs(lookVector.X) > math.abs(lookVector.Z) then
				if lookVector.X > 0 then
					return "Right"
				else
					return "Left"
				end
			else
				if lookVector.Z > 0 then
					return "Back"
				else
					return "Front"
				end
			end
		end
		local function placeBlock(position, normalId)
			local args = {
				[1] = position, -- Position where the block is placed
				[2] = normalId, -- Surface direction (e.g., Front, Back, Left, Right)
				[4] = BrickColor.new(345), -- Color of the block
				[5] = true -- Confirmation to place the block
			}
			remoteFunction:InvokeServer(unpack(args))
		end
		local function blockExistsAtPosition(position)
			local regionStart = position - (blocksize / 2) -- Start corner of the block's region
			local regionEnd = position + (blocksize / 2) -- Opposite corner of the block's region
			local region = Region3.new(regionStart, regionEnd)
			local parts = workspace:FindPartsInRegion3WithWhiteList(region, {workspace}, math.huge)

			for _, part in ipairs(parts) do
				if part.Name == "Block" then -- Replace "Block" with the name of your block type
					return true, part.Position
				end
			end

			return false, nil
		end
		local i = 0
		while _G.AutoBridge do
			if character then
				local humanoid:Humanoid = character:FindFirstChild("Humanoid")
				local root:BasePart = character:FindFirstChild("HumanoidRootPart")
				if humanoid and root then
					i += 1
					local blockdetected, blockposition = blockExistsAtPosition(root.Position)
					local direction = getFacingDirection()
					local offset = directions[direction]
					local nextposition = blockposition + (offset * (i - 1))
				end
			end
			wait(.05)
		end
	end
end)

local Tab = Window:NewTab("Visuals")
local Section = Tab:NewSection("ESP")

_G.EspPlayer = false
_G.EspOre = false

local function playeresp(player:Player,bool:BoolValue)
	local character = player.Character
	local root:BasePart = character:WaitForChild("HumanoidRootPart")
	local humanoid:Humanoid = character:WaitForChild("Humanoid")
	local haveheal = false
	local billboardgui = Instance.new("BillboardGui", character)
	billboardgui.Name = "ESP"
	billboardgui.Size = UDim2.new(0, 200, 0, 50)
	billboardgui.StudsOffset = Vector3.new(0, 3, 0)
	billboardgui.Adornee = character
	billboardgui.AlwaysOnTop = true
	local text = Instance.new("TextLabel", billboardgui)
	text.Size = UDim2.new(1, 0, 1, 0)
	text.BackgroundTransparency = 1
	text.TextColor3 = Color3.new(1, 1, 1)
	text.TextStrokeTransparency = 0
	text.TextStrokeColor3 = Color3.new(0, 0, 0)
	text.TextScaled = true
	local highlight = Instance.new("Highlight",player.Character)
	highlight.Name = "ESPHIGHLIGHT"
	highlight.OutlineColor = Color3.new(1, 1, 1)
	highlight.FillTransparency = 1
	highlight.OutlineTransparency = 0
	highlight.FillColor = Color3.new(0.564706, 0.992157, 1)
	if bool.Value == false then
		billboardgui.Enabled = false
	else
		billboardgui.Enabled = true
	end
	highlight.Enabled = billboardgui.Enabled
	bool.Changed:Connect(function(value: boolean) 
		if value == false then
			billboardgui.Enabled = false
		else
			billboardgui.Enabled = true
		end
		highlight.Enabled = billboardgui.Enabled
	end)
	if player.Backpack:FindFirstChild("Heal") ~= nil then
		haveheal = true
	end
	player.Backpack.ChildAdded:Connect(function(child: Instance) 
		if child.Name == "Heal" then
			haveheal = true
			text.Text = player.DisplayName.. " (@".. player.Name..") | ".. tostring(player.Character:FindFirstChild("Humanoid").Health).. " | Have Heal:".. tostring(haveheal and "On" or "Off")
		end
	end)
	player.Backpack.ChildRemoved:Connect(function(child: Instance) 
		if child.Name == "Heal" then
			haveheal = false
			text.Text = player.DisplayName.. " (@".. player.Name..") | ".. tostring(player.Character:FindFirstChild("Humanoid").Health).. " | Have Heal:".. tostring(haveheal and "On" or "Off")
		end
	end)
	text.Text = player.DisplayName.. " (@".. player.Name..") | ".. tostring(player.Character:FindFirstChild("Humanoid").Health).. " | Have Heal:".. tostring(haveheal and "On" or "Off")
	humanoid.HealthChanged:Connect(function()
		text.Text = player.DisplayName.. " (@".. player.Name..") | ".. tostring(player.Character:FindFirstChild("Humanoid").Health).. " | Have Heal:".. tostring(haveheal and "On" or "Off")
	end)
end

local function playeraddesp(player:Player)
	local character = player.Character
	local b = Instance.new("BoolValue",player)
	b.Name = "IsEsp"
	b.Value = _G.EspPlayer
	player.CharacterAdded:Connect(function(character: Model)
		playeresp(player,b)
	end)
	if character then
		playeresp(player,b)
	end
end

Players.PlayerAdded:Connect(playeraddesp)
for i,v in pairs(Players:GetPlayers()) do
	spawn(function() 
		playeraddesp(v)
	end)
end

Section:NewToggle("Player ESP", "Let you see all player throught object", function(state:boolean)
	_G.EspPlayer = state
	for i,v in pairs(Players:GetPlayers()) do
		spawn(function() 
			local isesp = v:FindFirstChild("IsEsp")
			if isesp ~= nil then
				isesp.Value = _G.EspPlayer
			end
		end)
	end
end)

local function oreesp(part:BasePart)
	if part:IsA("BasePart") and part.Parent.Name == "Ores" then
		local billboardgui:BillboardGui = part:FindFirstChild("ESPGUI")
		if billboardgui == nil then
			billboardgui = Instance.new("BillboardGui",part)
			billboardgui.Name = "ESPGUI"
			billboardgui.Size = UDim2.new(1,100,1,25)
			billboardgui.StudsOffset = Vector3.new(0,4,0)
			billboardgui.Adornee = part
			billboardgui.AlwaysOnTop = true
		end
		local text:TextLabel = billboardgui:FindFirstChild("TextLabel")
		if text == nil then
			text = Instance.new("TextLabel",billboardgui)
			text.Name = "TextLabel"
			text.Size = UDim2.new(1,0,1,0)
			text.BackgroundTransparency = 1
			text.TextColor3 = Color3.new(1, 1, 1)
			text.TextStrokeTransparency = 0.5
			text.TextScaled = true
			text.TextColor3 = part.Color
			text.TextTransparency = 0.5
			text.Text = "Ore"
		end
		local highlight:Highlight = part:FindFirstChild("ESP")
		if highlight == nil then
			highlight = Instance.new("Highlight",part)
			highlight.Name = "ESP"
			highlight.OutlineTransparency = 0
			highlight.FillTransparency = 0.6
			highlight.FillColor = part.Color
			highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
		end
		highlight.FillColor = part.Color
		text.Text = part.Name
		while true do
			billboardgui.Enabled = false
			highlight.Enabled = false
			repeat
				wait()
			until _G.EspOre == true
			highlight.Enabled = true
			billboardgui.Enabled = true
			repeat
				wait()
			until _G.EspOre == false
		end
	end
end

spawn(function() 
	workspace.DescendantAdded:Connect(function(descendant: Instance) 
		oreesp(descendant)
	end)

	for _,descendant in pairs(workspace:GetDescendants()) do
		oreesp(descendant)
	end
end)

Section:NewToggle("Ore ESP", "Let you see all ore throught island", function(state:boolean)
	_G.EspOre = state
end)

local Tab = Window:NewTab("Setting")
local Section = Tab:NewSection("Setting")
Section:NewKeybind("KeybindText", "KeybindInfo", Enum.KeyCode.RightControl, function()
	Library:ToggleUI()
end)

local Tab = Window:NewTab("Debug")
local Section = Tab:NewSection("Debug")

Section:NewButton("Check Tool","",function()
	print(
		"Axe:".. tostring(tools.axe ~= nil and tools.axe.Name or nil)..
			" Sword:".. tostring(tools.axe ~= nil and tools.sword.Name or nil)..
			" Bow:".. tostring(tools.axe ~= nil and tools.bow.Name or nil)..
			" Block".. tostring(tools.axe ~= nil and tools.block.Name or nil)
	)
end)
